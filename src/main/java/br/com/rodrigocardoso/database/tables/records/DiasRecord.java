/*
 * This file is generated by jOOQ.
*/
package br.com.rodrigocardoso.database.tables.records;


import br.com.rodrigocardoso.database.tables.Dias;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DiasRecord extends UpdatableRecordImpl<DiasRecord> implements Record3<Integer, String, String> {

    private static final long serialVersionUID = 1326460975;

    /**
     * Setter for <code>public.dias.id</code>.
     */
    public DiasRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.dias.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.dias.nome</code>.
     */
    public DiasRecord setNome(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.dias.nome</code>.
     */
    public String getNome() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.dias.show_nome</code>.
     */
    public DiasRecord setShowNome(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.dias.show_nome</code>.
     */
    public String getShowNome() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Dias.DIAS.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Dias.DIAS.NOME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Dias.DIAS.SHOW_NOME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getNome();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getShowNome();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getNome();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getShowNome();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DiasRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DiasRecord value2(String value) {
        setNome(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DiasRecord value3(String value) {
        setShowNome(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DiasRecord values(Integer value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DiasRecord
     */
    public DiasRecord() {
        super(Dias.DIAS);
    }

    /**
     * Create a detached, initialised DiasRecord
     */
    public DiasRecord(Integer id, String nome, String showNome) {
        super(Dias.DIAS);

        set(0, id);
        set(1, nome);
        set(2, showNome);
    }
}
