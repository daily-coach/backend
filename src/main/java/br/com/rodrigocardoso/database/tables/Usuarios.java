/*
 * This file is generated by jOOQ.
*/
package br.com.rodrigocardoso.database.tables;


import br.com.rodrigocardoso.database.Indexes;
import br.com.rodrigocardoso.database.Keys;
import br.com.rodrigocardoso.database.Public;
import br.com.rodrigocardoso.database.tables.records.UsuariosRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Usuarios extends TableImpl<UsuariosRecord> {

    private static final long serialVersionUID = 185414030;

    /**
     * The reference instance of <code>public.usuarios</code>
     */
    public static final Usuarios USUARIOS = new Usuarios();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsuariosRecord> getRecordType() {
        return UsuariosRecord.class;
    }

    /**
     * The column <code>public.usuarios.id</code>.
     */
    public final TableField<UsuariosRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('usuarios_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.usuarios.created</code>.
     */
    public final TableField<UsuariosRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.usuarios.modified</code>.
     */
    public final TableField<UsuariosRecord, Timestamp> MODIFIED = createField("modified", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.usuarios.active</code>.
     */
    public final TableField<UsuariosRecord, Boolean> ACTIVE = createField("active", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.usuarios.nome</code>.
     */
    public final TableField<UsuariosRecord, String> NOME = createField("nome", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.usuarios.celular</code>.
     */
    public final TableField<UsuariosRecord, String> CELULAR = createField("celular", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.usuarios.senha</code>.
     */
    public final TableField<UsuariosRecord, String> SENHA = createField("senha", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.usuarios.email</code>.
     */
    public final TableField<UsuariosRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.usuarios.salt</code>.
     */
    public final TableField<UsuariosRecord, String> SALT = createField("salt", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>public.usuarios</code> table reference
     */
    public Usuarios() {
        this(DSL.name("usuarios"), null);
    }

    /**
     * Create an aliased <code>public.usuarios</code> table reference
     */
    public Usuarios(String alias) {
        this(DSL.name(alias), USUARIOS);
    }

    /**
     * Create an aliased <code>public.usuarios</code> table reference
     */
    public Usuarios(Name alias) {
        this(alias, USUARIOS);
    }

    private Usuarios(Name alias, Table<UsuariosRecord> aliased) {
        this(alias, aliased, null);
    }

    private Usuarios(Name alias, Table<UsuariosRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TABLE_NAME_ID_UINDEX, Indexes.USUARIOS_EMAIL_UINDEX, Indexes.USUARIOS_ID_PK, Indexes.USUARIOS_SALT_UINDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UsuariosRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USUARIOS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UsuariosRecord> getPrimaryKey() {
        return Keys.USUARIOS_ID_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UsuariosRecord>> getKeys() {
        return Arrays.<UniqueKey<UsuariosRecord>>asList(Keys.USUARIOS_ID_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Usuarios as(String alias) {
        return new Usuarios(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Usuarios as(Name alias) {
        return new Usuarios(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Usuarios rename(String name) {
        return new Usuarios(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Usuarios rename(Name name) {
        return new Usuarios(name, null);
    }
}
