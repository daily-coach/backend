/*
 * This file is generated by jOOQ.
*/
package br.com.rodrigocardoso.database.tables;


import br.com.rodrigocardoso.database.Indexes;
import br.com.rodrigocardoso.database.Keys;
import br.com.rodrigocardoso.database.Public;
import br.com.rodrigocardoso.database.tables.records.DiasRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dias extends TableImpl<DiasRecord> {

    private static final long serialVersionUID = -1675928664;

    /**
     * The reference instance of <code>public.dias</code>
     */
    public static final Dias DIAS = new Dias();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DiasRecord> getRecordType() {
        return DiasRecord.class;
    }

    /**
     * The column <code>public.dias.id</code>.
     */
    public final TableField<DiasRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('tarefas_dias_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.dias.nome</code>.
     */
    public final TableField<DiasRecord, String> NOME = createField("nome", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.dias.show_nome</code>.
     */
    public final TableField<DiasRecord, String> SHOW_NOME = createField("show_nome", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * Create a <code>public.dias</code> table reference
     */
    public Dias() {
        this(DSL.name("dias"), null);
    }

    /**
     * Create an aliased <code>public.dias</code> table reference
     */
    public Dias(String alias) {
        this(DSL.name(alias), DIAS);
    }

    /**
     * Create an aliased <code>public.dias</code> table reference
     */
    public Dias(Name alias) {
        this(alias, DIAS);
    }

    private Dias(Name alias, Table<DiasRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dias(Name alias, Table<DiasRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TAREFAS_DIAS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DiasRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DIAS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DiasRecord> getPrimaryKey() {
        return Keys.TAREFAS_DIAS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DiasRecord>> getKeys() {
        return Arrays.<UniqueKey<DiasRecord>>asList(Keys.TAREFAS_DIAS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dias as(String alias) {
        return new Dias(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dias as(Name alias) {
        return new Dias(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dias rename(String name) {
        return new Dias(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dias rename(Name name) {
        return new Dias(name, null);
    }
}
